#!/bin/bash

# üîç Health Check Script for ML Service
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/health_check.sh

echo "üîç ML SERVICE HEALTH CHECK"
echo "=" * 50

BASE_URL="http://localhost:8001"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    local url=$1
    local name=$2

    if curl -s -f "$url" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC} $name: OK"
        return 0
    else
        echo -e "${RED}‚ùå${NC} $name: FAILED"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
check_response_time() {
    local url=$1
    local name=$2

    local response_time=$(curl -o /dev/null -s -w '%{time_total}' "$url")
    local response_time_ms=$(echo "$response_time * 1000" | bc | cut -d. -f1)

    if (( response_time_ms < 1000 )); then
        echo -e "${GREEN}‚ö°${NC} $name: ${response_time_ms}ms"
    elif (( response_time_ms < 3000 )); then
        echo -e "${YELLOW}‚è±Ô∏è${NC} $name: ${response_time_ms}ms"
    else
        echo -e "${RED}üêå${NC} $name: ${response_time_ms}ms"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö endpoint
echo "üåê Checking API Endpoints:"
check_status "${BASE_URL}/" "Root"
check_status "${BASE_URL}/health" "Health"
check_status "${BASE_URL}/docs" "Documentation"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
echo -e "\n‚è±Ô∏è  Response Times:"
check_response_time "${BASE_URL}/health" "Health Check"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
echo -e "\nüíª System Resources:"
if command -v ps &> /dev/null; then
    if pgrep -f "python.*main.py" > /dev/null; then
        echo -e "${GREEN}‚úÖ${NC} ML Service Process: Running"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        if command -v ps &> /dev/null; then
            local memory_usage=$(ps -o pid,ppid,cmd,%mem,%cpu --sort=-%mem -C python3 | grep "main.py" | head -1 | awk '{print $4}')
            local cpu_usage=$(ps -o pid,ppid,cmd,%mem,%cpu --sort=-%mem -C python3 | grep "main.py" | head -1 | awk '{print $5}')
            echo -e "${GREEN}üíæ${NC} Memory Usage: ${memory_usage}%"
            echo -e "${GREEN}üìä${NC} CPU Usage: ${cpu_usage}%"
        fi
    else
        echo -e "${RED}‚ùå${NC} ML Service Process: Not Running"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
echo -e "\nüíø Disk Space:"
if command -v df &> /dev/null; then
    local disk_usage=$(df -h . | tail -1 | awk '{print $5}' | sed 's/%//')
    if (( disk_usage < 80 )); then
        echo -e "${GREEN}‚úÖ${NC} Disk Usage: ${disk_usage}%"
    elif (( disk_usage < 90 )); then
        echo -e "${YELLOW}‚ö†Ô∏è${NC} Disk Usage: ${disk_usage}%"
    else
        echo -e "${RED}üö®${NC} Disk Usage: ${disk_usage}%"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
echo -e "\nüîå Port Check:"
if command -v netstat &> /dev/null; then
    if netstat -an | grep ":8001" | grep -i listen > /dev/null; then
        echo -e "${GREEN}‚úÖ${NC} Port 8001: Listening"
    else
        echo -e "${RED}‚ùå${NC} Port 8001: Not Listening"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
echo -e "\nüìù Log Analysis:"
if [ -f "logs/service.log" ]; then
    local error_count=$(tail -100 logs/service.log | grep -i "error\|exception\|traceback" | wc -l)
    if (( error_count == 0 )); then
        echo -e "${GREEN}‚úÖ${NC} No errors in last 100 lines"
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC} ${error_count} errors in last 100 lines"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è${NC} No log file found"
fi

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
echo -e "\nüè• Detailed Health Check:"
if curl -s "${BASE_URL}/health" | grep -q "healthy"; then
    echo -e "${GREEN}‚úÖ${NC} Service Health: Good"
else
    echo -e "${RED}‚ùå${NC} Service Health: Issues detected"
fi

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo -e "\nüí° Recommendations:"
if ! pgrep -f "python.*main.py" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è${NC} Start ML Service: ./scripts/production_start.sh"
fi

if [ -f "logs/service.log" ] && tail -100 logs/service.log | grep -i "error\|exception\|traceback" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è${NC} Check logs: tail -f logs/service.log"
fi

echo -e "${GREEN}‚úÖ${NC} Run full test: python3 test_health_check.py"
echo -e "${GREEN}‚úÖ${NC} Load testing: python3 test_load_testing.py"

echo -e "\nüìÖ $TIMESTAMP"
echo "=" * 50