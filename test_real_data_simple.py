#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_real_data_simple.py
"""
import requests
import json
import pandas as pd
import os
import tempfile
import xml.etree.ElementTree as ET

def test_real_csv():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ CSV –¥–∞–Ω–Ω—ã–º–∏ –æ –±–∏–ª–µ—Ç–∞—Ö –º—É–∑–µ–µ–≤"""
    print("üî¨ CSV: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∏–ª–µ—Ç–∞—Ö –º—É–∑–µ–µ–≤...")

    # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 1000 —Å—Ç—Ä–æ–∫)
    csv_file = "datasets/syn_csv/part-00000-37dced01-2ad2-48c8-a56d-54b4d8760599-c000.csv"
    df = pd.read_csv(csv_file, sep=';', nrows=1000)

    print(f"   üìä –†–∞–∑–º–µ—Ä: {len(df)} —Å—Ç—Ä–æ–∫ √ó {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"   üìã –ü—Ä–∏–º–µ—Ä –∫–æ–ª–æ–Ω–æ–∫: {list(df.columns[:5])}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
        df.to_csv(f.name, index=False, sep=';')
        temp_file = f.name

    try:
        with open(temp_file, 'rb') as f:
            files = {'file': f}
            data = {
                'format': 'csv',
                'table_name': 'museum_tickets_real',
                'use_cache': 'false'
            }

            response = requests.post("http://localhost:8001/recommend", files=files, data=data)

            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('target')} ({result.get('confidence'):.1%})")
                print(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {result.get('data_profile', {}).get('record_count', 0)} –∑–∞–ø–∏—Å–µ–π, {result.get('data_profile', {}).get('field_count', 0)} –ø–æ–ª–µ–π")
                return result
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   üìù –î–µ—Ç–∞–ª–∏: {response.text}")
                return None
    finally:
        os.unlink(temp_file)

def test_real_json():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ JSON –¥–∞–Ω–Ω—ã–º–∏ –æ–± –ò–ü"""
    print("\nüî¨ JSON: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –ò–ü...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö
    test_data = [
        {
            "date_exec": "2024-10-09",
            "code_form_ind_entrep": "1",
            "name_form_ind_entrep": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
            "inf_surname_ind_entrep_sex": "1",
            "citizenship_kind": "1",
            "inf_authority_reg_ind_entrep_name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ü–µ–Ω–∑–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            "inf_authority_reg_ind_entrep_code": "5800",
            "inf_reg_tax_ind_entrep": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ü–µ–Ω–∑–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            "inf_okved_code": "01.25.1",
            "inf_okved_name": "–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ö –ø–ª–æ–¥–æ–≤—ã—Ö –∏ —è–≥–æ–¥–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä",
            "process_dttm": "2024-10-09T21:07:09.765+03:00",
            "error_code": 0,
            "inf_surname_ind_entrep_firstname": "–í–õ–ê–î–ò–ú–ò–†",
            "inf_surname_ind_entrep_surname": "–ó–í–ï–†–ï–í",
            "inf_surname_ind_entrep_midname": "–ï–í–ì–ï–ù–¨–ï–í–ò–ß",
            "dob": "1980-02-29",
            "date_ogrnip": "2023-11-14",
            "id_card": "77 82 349990"
        },
        {
            "date_exec": "2024-10-08",
            "code_form_ind_entrep": "1",
            "name_form_ind_entrep": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
            "inf_surname_ind_entrep_sex": "2",
            "citizenship_kind": "1",
            "inf_authority_reg_ind_entrep_name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            "inf_authority_reg_ind_entrep_code": "5000",
            "inf_reg_tax_ind_entrep": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            "inf_okved_code": "62.01",
            "inf_okved_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è",
            "process_dttm": "2024-10-08T15:30:00.000+03:00",
            "error_code": 0,
            "inf_surname_ind_entrep_firstname": "–ê–ù–ù–ê",
            "inf_surname_ind_entrep_surname": "–ü–ï–¢–†–û–í–ê",
            "inf_surname_ind_entrep_midname": "–ò–í–ê–ù–û–í–ù–ê",
            "dob": "1985-05-15",
            "date_ogrnip": "2022-03-20",
            "id_card": "50 12 345678"
        }
    ]

    print(f"   üìä –†–∞–∑–º–µ—Ä: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
    print(f"   üìã –ü—Ä–∏–º–µ—Ä –ø–æ–ª–µ–π: {list(test_data[0].keys())[:5]}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, separators=(',', ':'))
        temp_file = f.name

    try:
        with open(temp_file, 'rb') as f:
            files = {'file': f}
            data = {
                'format': 'json',
                'table_name': 'individual_entrepreneurs_real',
                'use_cache': 'false'
            }

            response = requests.post("http://localhost:8001/recommend", files=files, data=data)

            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('target')} ({result.get('confidence'):.1%})")
                print(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {result.get('data_profile', {}).get('record_count', 0)} –∑–∞–ø–∏—Å–µ–π, {result.get('data_profile', {}).get('field_count', 0)} –ø–æ–ª–µ–π")
                return result
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   üìù –î–µ—Ç–∞–ª–∏: {response.text}")
                return None
    finally:
        os.unlink(temp_file)

def test_real_xml():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ XML –¥–∞–Ω–Ω—ã–º–∏ (–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ)"""
    print("\nüî¨ XML: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ XML –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö
    xml_content = '''<?xml version="1.0" encoding="utf-8"?>
<root>
    <item>
        <metadata>
            <last_change_record_number>50:21:0140218:1614-11</last_change_record_number>
            <last_container_fixed_at>2019-01-09T00:00:00+03:00</last_container_fixed_at>
            <status>actual</status>
        </metadata>
        <object_common_data>
            <cad_number>50:21:0140218:1614</cad_number>
            <previously_posted>true</previously_posted>
            <quarter_cad_number>77:17:0140116</quarter_cad_number>
        </object_common_data>
        <dated_info>
            <oti>
                <letter>–õ</letter>
            </oti>
        </dated_info>
    </item>
    <item>
        <metadata>
            <last_change_record_number>77:01:0000001:1234</last_change_record_number>
            <last_container_fixed_at>2020-05-15T00:00:00+03:00</last_container_fixed_at>
            <status>actual</status>
        </metadata>
        <object_common_data>
            <cad_number>77:01:0000001:1234</cad_number>
            <previously_posted>false</previously_posted>
            <quarter_cad_number>77:01:0001000</quarter_cad_number>
        </object_common_data>
        <dated_info>
            <oti>
                <letter>–ê</letter>
            </oti>
        </dated_info>
    </item>
</root>'''

    print(f"   üìä –†–∞–∑–º–µ—Ä: {len(xml_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç, 2 –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.xml', delete=False, encoding='utf-8') as f:
        f.write(xml_content)
        temp_file = f.name

    try:
        with open(temp_file, 'rb') as f:
            files = {'file': f}
            data = {
                'format': 'xml',
                'table_name': 'cadastral_data_real',
                'use_cache': 'false'
            }

            response = requests.post("http://localhost:8001/recommend", files=files, data=data)

            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('target')} ({result.get('confidence'):.1%})")
                print(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {result.get('data_profile', {}).get('record_count', 0)} –∑–∞–ø–∏—Å–µ–π, {result.get('data_profile', {}).get('field_count', 0)} –ø–æ–ª–µ–π")
                return result
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   üìù –î–µ—Ç–∞–ª–∏: {response.text}")
                return None
    finally:
        os.unlink(temp_file)

def main():
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –°–ï–†–í–ò–°–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("="*80)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    try:
        response = requests.get("http://localhost:8001/")
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    except:
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return

    print("\nüìã –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
    print("-" * 60)

    results = []

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV
    csv_result = test_real_csv()
    if csv_result:
        results.append(("CSV Museum Tickets", csv_result))

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON
    json_result = test_real_json()
    if json_result:
        results.append(("JSON Individual Entrepreneurs", json_result))

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º XML
    xml_result = test_real_xml()
    if xml_result:
        results.append(("XML Cadastral Data", xml_result))

    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if results:
        print(f"\n" + "="*80)
        print("üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("="*80)
        print(f"{'–î–∞—Ç–∞—Å–µ—Ç':<30} {'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è':<12} {'–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':<10} {'–ó–∞–ø–∏—Å–∏':<8} {'–ü–æ–ª—è':<6} {'–í—Ä–µ–º—è':<6} {'–ß–∏—Å–ª–∞':<6} {'–¢–µ–∫—Å—Ç':<6}")
        print("-" * 80)

        for name, result in results:
            profile = result.get('data_profile', {})
            print(f"{name:<30} {result.get('target', 'N/A'):<12} {result.get('confidence', 0):<10.1%} {profile.get('record_count', 0):<8} {profile.get('field_count', 0):<6} {str(profile.get('has_temporal', False)):<6} {str(profile.get('has_numeric', False)):<6} {str(profile.get('has_text', False)):<6}")

    print(f"\n" + "="*80)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*80)
    print("‚úÖ ML —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã—Ö –∫ –≤–∞—à–∏–º —Ä–µ–∞–ª—å–Ω—ã–º")
    print("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()