#!/usr/bin/env python3
"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_load_testing.py
"""
import requests
import json
import time
import threading
import queue
import statistics
from concurrent.futures import ThreadPoolExecutor
import pandas as pd
import os
import tempfile
import random

class LoadTester:
    def __init__(self, base_url="http://localhost:8001"):
        self.base_url = base_url
        self.results = queue.Queue()
        self.errors = queue.Queue()

    def create_test_data(self, data_type="csv", size="small"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        if data_type == "csv":
            if size == "small":
                df = pd.DataFrame({
                    'id': range(1, 101),
                    'name': [f'Item_{i}' for i in range(1, 101)],
                    'value': [random.randint(1, 1000) for _ in range(100)],
                    'category': [random.choice(['A', 'B', 'C']) for _ in range(100)]
                })
            else:  # large
                df = pd.DataFrame({
                    'id': range(1, 10001),
                    'name': [f'Item_{i}' for i in range(1, 10001)],
                    'value': [random.randint(1, 10000) for _ in range(10000)],
                    'category': [random.choice(['A', 'B', 'C', 'D', 'E']) for _ in range(10000)],
                    'timestamp': [pd.Timestamp.now() - pd.Timedelta(days=random.randint(0, 365)) for _ in range(10000)]
                })

            with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
                df.to_csv(f.name, index=False)
                return f.name, 'csv'

        elif data_type == "json":
            if size == "small":
                data = [
                    {"id": i, "name": f"User_{i}", "age": random.randint(18, 80)}
                    for i in range(1, 51)
                ]
            else:  # large
                data = [
                    {
                        "id": i,
                        "name": f"User_{i}",
                        "age": random.randint(18, 80),
                        "email": f"user{i}@example.com",
                        "active": random.choice([True, False]),
                        "score": random.randint(1, 100),
                        "created_at": f"2024-{random.randint(1,12):02d}-{random.randint(1,28):02d}"
                    }
                    for i in range(1, 5001)
                ]

            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False)
                return f.name, 'json'

    def send_request(self, file_path, format_type, request_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = time.time()

        try:
            with open(file_path, 'rb') as f:
                files = {'file': f}
                data = {
                    'format': format_type,
                    'table_name': f'test_table_{request_id}',
                    'use_cache': 'false'
                }

                response = requests.post(
                    f"{self.base_url}/recommend",
                    files=files,
                    data=data,
                    timeout=30
                )

            end_time = time.time()
            response_time = end_time - start_time

            result = {
                'request_id': request_id,
                'response_time': response_time,
                'status_code': response.status_code,
                'success': response.status_code == 200,
                'file_size': os.path.getsize(file_path),
                'format': format_type
            }

            if response.status_code == 200:
                result_data = response.json()
                result['confidence'] = result_data.get('confidence', 0)
                result['target'] = result_data.get('target', 'unknown')
            else:
                result['error'] = response.text[:200]

            self.results.put(result)

        except Exception as e:
            end_time = time.time()
            self.errors.put({
                'request_id': request_id,
                'error': str(e),
                'response_time': end_time - start_time
            })

        finally:
            try:
                os.unlink(file_path)
            except:
                pass

    def run_load_test(self, concurrent_users=10, requests_per_user=5, data_types=None):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üöÄ –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {concurrent_users}")
        print(f"üì® –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requests_per_user}")
        print(f"üéØ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {concurrent_users * requests_per_user}")
        print("=" * 60)

        if data_types is None:
            data_types = [('csv', 'small'), ('json', 'small'), ('csv', 'large')]

        start_time = time.time()
        total_requests = concurrent_users * requests_per_user

        def worker():
            for i in range(requests_per_user):
                data_type, size = random.choice(data_types)
                file_path, format_type = self.create_test_data(data_type, size)
                request_id = threading.current_thread().ident * 1000 + i
                self.send_request(file_path, format_type, request_id)

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        with ThreadPoolExecutor(max_workers=concurrent_users) as executor:
            futures = [executor.submit(worker) for _ in range(concurrent_users)]
            for future in futures:
                future.result()

        end_time = time.time()
        total_time = end_time - start_time

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.analyze_results(total_requests, total_time, concurrent_users)

    def analyze_results(self, total_requests, total_time, concurrent_users):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        results_list = []
        errors_list = []

        while not self.results.empty():
            results_list.append(self.results.get())

        while not self.errors.empty():
            errors_list.append(self.errors.get())

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_requests = [r for r in results_list if r['success']]
        failed_requests = [r for r in results_list if not r['success']] + errors_list

        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful_requests)} ({len(successful_requests)/total_requests*100:.1f}%)")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(failed_requests)} ({len(failed_requests)/total_requests*100:.1f}%)")
        print(f"üìä Requests/sec: {total_requests/total_time:.2f}")

        if successful_requests:
            response_times = [r['response_time'] for r in successful_requests]
            confidences = [r['confidence'] for r in successful_requests]

            print(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ (—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã):")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {statistics.mean(response_times):.3f} —Å–µ–∫—É–Ω–¥")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min(response_times):.3f} —Å–µ–∫—É–Ω–¥")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max(response_times):.3f} —Å–µ–∫—É–Ω–¥")
            print(f"   95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {statistics.quantiles(response_times, n=20)[18]:.3f} —Å–µ–∫—É–Ω–¥")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {statistics.mean(confidences):.1%}")

        if failed_requests:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            error_types = {}
            for error in failed_requests:
                error_msg = error.get('error', 'Unknown error')[:100]
                error_types[error_msg] = error_types.get(error_msg, 0) + 1

            for error_msg, count in error_types.items():
                print(f"   {error_msg}: {count} —Ä–∞–∑")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if len(successful_requests) / total_requests < 0.95:
            print("   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞")
        if statistics.mean(response_times) > 5.0:
            print("   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É")
        if total_requests/total_time < 1.0:
            print("   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã")

        print(f"\nüéØ –ù–ê–ì–†–£–ó–ö–ê ({concurrent_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        print(f"   –°–µ—Ä–≤–∏—Å {'—Å—Ç–∞–±–∏–ª–µ–Ω' if len(successful_requests)/total_requests > 0.9 else '–Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω'} –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {'—Ö–æ—Ä–æ—à–∞—è' if statistics.mean(response_times) < 2.0 else '—Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'}")

def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get("http://localhost:8001/health", timeout=10)
        if response.status_code == 200:
            health = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤: {health}")
            return True
        else:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        return False

def main():
    print("üî¨ –ù–ê–ß–ê–õ–û –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ML –°–ï–†–í–ò–°–ê")
    print("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    if not health_check():
        print("\n‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ ML —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        print("   cd ml_service && python3 main.py")
        return

    # –†–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tester = LoadTester()

    print("\nüìã –°–¶–ï–ù–ê–†–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)

    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    print("\n1Ô∏è‚É£ –°—Ü–µ–Ω–∞—Ä–∏–π: –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
    tester.run_load_test(concurrent_users=5, requests_per_user=3)

    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
    print("\n2Ô∏è‚É£ –°—Ü–µ–Ω–∞—Ä–∏–π: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞")
    tester.run_load_test(concurrent_users=10, requests_per_user=5)

    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    print("\n3Ô∏è‚É£ –°—Ü–µ–Ω–∞—Ä–∏–π: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
    tester.run_load_test(concurrent_users=20, requests_per_user=3)

    print(f"\nüéâ –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)

if __name__ == "__main__":
    main()