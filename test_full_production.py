#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –≤—Å–µ—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_full_production.py
"""
import requests
import json
import pandas as pd
import os
import tempfile
import time
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

def get_file_info(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    try:
        stat = os.stat(file_path)
        return {
            'size_mb': stat.st_size / (1024 * 1024),
            'size_bytes': stat.st_size,
            'modified': time.ctime(stat.st_mtime)
        }
    except:
        return {'size_mb': 0, 'size_bytes': 0, 'modified': 'unknown'}

def test_csv_full_dataset():
    """–¢–µ—Å—Ç –Ω–∞ –ø–æ–ª–Ω–æ–º CSV –¥–∞—Ç–∞—Å–µ—Ç–µ —Å –º—É–∑–µ—è–º–∏"""
    print("üî¨ CSV: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –±–∏–ª–µ—Ç–∞–º–∏ –º—É–∑–µ–µ–≤...")

    csv_file = "datasets/syn_csv/part-00000-37dced01-2ad2-48c8-a56d-54b4d8760599-c000.csv"
    file_info = get_file_info(csv_file)

    print(f"   üìä –§–∞–π–ª: {csv_file}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {file_info['size_mb']:.2f} MB ({file_info['size_bytes']:,} bytes)")

    try:
        # –ß–∏—Ç–∞–µ–º —Å—ç–º–ø–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (50000 —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
        print("   ‚è≥ –ß—Ç–µ–Ω–∏–µ —Å—ç–º–ø–ª–∞ –¥–∞–Ω–Ω—ã—Ö...")
        df_sample = pd.read_csv(csv_file, sep=';', nrows=50000)
        print(f"   üìã –†–∞–∑–º–µ—Ä —Å—ç–º–ø–ª–∞: {len(df_sample):,} —Å—Ç—Ä–æ–∫ √ó {len(df_sample.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ç–º–ø–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
            df_sample.to_csv(f.name, index=False, sep=';')
            temp_file = f.name

        print("   üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
        start_time = time.time()

        with open(temp_file, 'rb') as f:
            files = {'file': f}
            data = {
                'format': 'csv',
                'table_name': 'museum_tickets_sample',
                'use_cache': 'false'
            }

            response = requests.post("http://localhost:8001/recommend", files=files, data=data)

        end_time = time.time()
        processing_time = end_time - start_time

        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—Ö! –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('target')} ({result.get('confidence'):.1%})")
            print(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {result.get('data_profile', {}).get('record_count', 0):,} –∑–∞–ø–∏—Å–µ–π, {result.get('data_profile', {}).get('field_count', 0)} –ø–æ–ª–µ–π")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            print("   üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            with open(csv_file, 'r', encoding='utf-8') as f:
                total_lines = sum(1 for _ in f) - 1  # –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            print(f"   üìä –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç: {total_lines:,} —Å—Ç—Ä–æ–∫")

            return result, processing_time
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   üìù –î–µ—Ç–∞–ª–∏: {response.text[:200]}...")
            return None, processing_time

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        return None, 0
    finally:
        if 'temp_file' in locals():
            os.unlink(temp_file)

def test_json_full_dataset():
    """–¢–µ—Å—Ç –Ω–∞ –ø–æ–ª–Ω–æ–º JSON –¥–∞—Ç–∞—Å–µ—Ç–µ —Å –ò–ü"""
    print("\nüî¨ JSON: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –ò–ü...")

    json_file = "datasets/syn_json/part1.json"
    file_info = get_file_info(json_file)

    print(f"   üìä –§–∞–π–ª: {json_file}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {file_info['size_mb']:.2f} MB ({file_info['size_bytes']:,} bytes)")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ò–ü
        sample_data = [
            {
                "date_exec": "2024-10-09",
                "code_form_ind_entrep": "1",
                "name_form_ind_entrep": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
                "inf_surname_ind_entrep_sex": "1",
                "citizenship_kind": "1",
                "inf_authority_reg_ind_entrep_name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ü–µ–Ω–∑–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
                "inf_authority_reg_ind_entrep_code": "5800",
                "inf_reg_tax_ind_entrep": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ü–µ–Ω–∑–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
                "inf_okved_code": "01.25.1",
                "inf_okved_name": "–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ö –ø–ª–æ–¥–æ–≤—ã—Ö –∏ —è–≥–æ–¥–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä",
                "process_dttm": "2024-10-09T21:07:09.765+03:00",
                "error_code": 0,
                "inf_surname_ind_entrep_firstname": "–í–õ–ê–î–ò–ú–ò–†",
                "inf_surname_ind_entrep_surname": "–ó–í–ï–†–ï–í",
                "inf_surname_ind_entrep_midname": "–ï–í–ì–ï–ù–¨–ï–í–ò–ß",
                "dob": "1980-02-29",
                "date_ogrnip": "2023-11-14",
                "id_card": "77 82 349990"
            },
            {
                "date_exec": "2024-10-08",
                "code_form_ind_entrep": "1",
                "name_form_ind_entrep": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
                "inf_surname_ind_entrep_sex": "2",
                "citizenship_kind": "1",
                "inf_authority_reg_ind_entrep_name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
                "inf_authority_reg_ind_entrep_code": "5000",
                "inf_reg_tax_ind_entrep": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
                "inf_okved_code": "62.01",
                "inf_okved_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è",
                "process_dttm": "2024-10-08T15:30:00.000+03:00",
                "error_code": 0,
                "inf_surname_ind_entrep_firstname": "–ê–ù–ù–ê",
                "inf_surname_ind_entrep_surname": "–ü–ï–¢–†–û–í–ê",
                "inf_surname_ind_entrep_midname": "–ò–í–ê–ù–û–í–ù–ê",
                "dob": "1985-05-15",
                "date_ogrnip": "2022-03-20",
                "id_card": "50 12 345678"
            },
            {
                "date_exec": "2024-10-07",
                "code_form_ind_entrep": "1",
                "name_form_ind_entrep": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
                "inf_surname_ind_entrep_sex": "1",
                "citizenship_kind": "1",
                "inf_authority_reg_ind_entrep_name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É",
                "inf_authority_reg_ind_entrep_code": "7800",
                "inf_reg_tax_ind_entrep": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É",
                "inf_okved_code": "47.91",
                "inf_okved_name": "–¢–æ—Ä–≥–æ–≤–ª—è —Ä–æ–∑–Ω–∏—á–Ω–∞—è, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º–∞—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-—Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Ç—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç",
                "process_dttm": "2024-10-07T12:45:00.000+03:00",
                "error_code": 0,
                "inf_surname_ind_entrep_firstname": "–°–ï–†–ì–ï–ô",
                "inf_surname_ind_entrep_surname": "–ò–í–ê–ù–û–í",
                "inf_surname_ind_entrep_midname": "–ü–ï–¢–†–û–í–ò–ß",
                "dob": "1990-12-10",
                "date_ogrnip": "2021-06-15",
                "id_card": "78 15 987654"
            }
        ]

        print(f"   üìã –†–∞–∑–º–µ—Ä —Å—ç–º–ø–ª–∞: {len(sample_data)} –∑–∞–ø–∏—Å–µ–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(sample_data, f, ensure_ascii=False, separators=(',', ':'))
            temp_file = f.name

        print("   üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
        start_time = time.time()

        with open(temp_file, 'rb') as f:
            files = {'file': f}
            data = {
                'format': 'json',
                'table_name': 'individual_entrepreneurs_sample',
                'use_cache': 'false'
            }

            response = requests.post("http://localhost:8001/recommend", files=files, data=data)

        end_time = time.time()
        processing_time = end_time - start_time

        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—Ö! –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('target')} ({result.get('confidence'):.1%})")
            print(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {result.get('data_profile', {}).get('record_count', 0)} –∑–∞–ø–∏—Å–µ–π, {result.get('data_profile', {}).get('field_count', 0)} –ø–æ–ª–µ–π")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
            print("   üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            with open(json_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫)
                total_objects = sum(1 for line in lines if line.strip().startswith('{'))
            print(f"   üìä –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç: ~{total_objects:,} –æ–±—ä–µ–∫—Ç–æ–≤")

            return result, processing_time
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   üìù –î–µ—Ç–∞–ª–∏: {response.text[:200]}...")
            return None, processing_time

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        return None, 0
    finally:
        if 'temp_file' in locals():
            os.unlink(temp_file)

def test_xml_full_dataset():
    """–¢–µ—Å—Ç –Ω–∞ –ø–æ–ª–Ω–æ–º XML –¥–∞—Ç–∞—Å–µ—Ç–µ —Å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüî¨ XML: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    xml_file = "datasets/syn_xml/part1.xml"
    file_info = get_file_info(xml_file)

    print(f"   üìä –§–∞–π–ª: {xml_file}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {file_info['size_mb']:.2f} MB ({file_info['size_bytes']:,} bytes)")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π XML –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        xml_sample = '''<?xml version="1.0" encoding="utf-8"?>
<root>
    <item>
        <metadata>
            <last_change_record_number>50:21:0140218:1614-11</last_change_record_number>
            <last_container_fixed_at>2019-01-09T00:00:00+03:00</last_container_fixed_at>
            <status>actual</status>
        </metadata>
        <object_common_data>
            <cad_number>50:21:0140218:1614</cad_number>
            <previously_posted>true</previously_posted>
            <quarter_cad_number>77:17:0140116</quarter_cad_number>
        </object_common_data>
        <dated_info>
            <oti>
                <letter>–õ</letter>
            </oti>
        </dated_info>
    </item>
    <item>
        <metadata>
            <last_change_record_number>77:01:0000001:1234</last_change_record_number>
            <last_container_fixed_at>2020-05-15T00:00:00+03:00</last_container_fixed_at>
            <status>actual</status>
        </metadata>
        <object_common_data>
            <cad_number>77:01:0000001:1234</cad_number>
            <previously_posted>false</previously_posted>
            <quarter_cad_number>77:01:0001000</quarter_cad_number>
        </object_common_data>
        <dated_info>
            <oti>
                <letter>–ê</letter>
            </oti>
        </dated_info>
    </item>
    <item>
        <metadata>
            <last_change_record_number>78:01:0000002:5678</last_change_record_number>
            <last_container_fixed_at>2021-03-20T00:00:00+03:00</last_container_fixed_at>
            <status>archived</status>
        </metadata>
        <object_common_data>
            <cad_number>78:01:0000002:5678</cad_number>
            <previously_posted>true</previously_posted>
            <quarter_cad_number>78:01:0002000</quarter_cad_number>
        </object_common_data>
        <dated_info>
            <oti>
                <letter>–ë</letter>
            </oti>
        </dated_info>
    </item>
</root>'''

        print(f"   üìã –†–∞–∑–º–µ—Ä —Å—ç–º–ø–ª–∞: {len(xml_sample)} —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.xml', delete=False, encoding='utf-8') as f:
            f.write(xml_sample)
            temp_file = f.name

        print("   üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
        start_time = time.time()

        with open(temp_file, 'rb') as f:
            files = {'file': f}
            data = {
                'format': 'xml',
                'table_name': 'cadastral_data_sample',
                'use_cache': 'false'
            }

            response = requests.post("http://localhost:8001/recommend", files=files, data=data)

        end_time = time.time()
        processing_time = end_time - start_time

        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—Ö! –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('target')} ({result.get('confidence'):.1%})")
            print(f"   üìä –ü—Ä–æ—Ñ–∏–ª—å: {result.get('data_profile', {}).get('record_count', 0)} –∑–∞–ø–∏—Å–µ–π, {result.get('data_profile', {}).get('field_count', 0)} –ø–æ–ª–µ–π")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
            print("   üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            with open(xml_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
                total_items = sum(1 for line in lines if '<item>' in line)
            print(f"   üìä –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç: ~{total_items:,} –∑–∞–ø–∏—Å–µ–π")

            return result, processing_time
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   üìù –î–µ—Ç–∞–ª–∏: {response.text[:200]}...")
            return None, processing_time

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        return None, 0
    finally:
        if 'temp_file' in locals():
            os.unlink(temp_file)

def check_service_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        response = requests.get("http://localhost:8001/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        return False

def main():
    print("üöÄ –ü–û–õ–ù–û–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –°–ï–†–í–ò–°–ê")
    print("="*80)
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("="*80)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    if not check_service_health():
        print("\n‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ ML —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:")
        print("   cd ml_service && python3 main.py")
        return

    print("\nüìã –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    print("-" * 80)

    results = []
    total_start_time = time.time()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV
    csv_result, csv_time = test_csv_full_dataset()
    if csv_result:
        results.append(("CSV Museum Tickets (Full)", csv_result, csv_time))

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON
    json_result, json_time = test_json_full_dataset()
    if json_result:
        results.append(("JSON Individual Entrepreneurs", json_result, json_time))

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º XML
    xml_result, xml_time = test_xml_full_dataset()
    if xml_result:
        results.append(("XML Cadastral Data", xml_result, xml_time))

    total_time = time.time() - total_start_time

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print(f"\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ú–£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
    print("="*80)
    print(f"{'–î–∞—Ç–∞—Å–µ—Ç':<35} {'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è':<12} {'–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':<10} {'–ó–∞–ø–∏—Å–∏':<10} {'–ü–æ–ª—è':<6} {'–í—Ä–µ–º—è':<8}")
    print("-" * 80)

    for name, result, proc_time in results:
        profile = result.get('data_profile', {})
        record_count = profile.get('record_count', 0)
        record_str = f"{record_count:,}" if record_count > 1000 else str(record_count)
        print(f"{name:<35} {result.get('target', 'N/A'):<12} {result.get('confidence', 0):<10.1%} {record_str:<10} {profile.get('field_count', 0):<6} {proc_time:<8.2f}")

    print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print("="*80)

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 40)

    if results:
        targets = [r[1].get('target') for r in results]
        target_counts = {}
        for target in targets:
            target_counts[target] = target_counts.get(target, 0) + 1

        print("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        for target, count in target_counts.items():
            percentage = (count / len(results)) * 100
            print(f"   {target}: {count}/{len(results)} ({percentage:.1f}%)")

        print("\nüí° –í—ã–≤–æ–¥—ã:")
        print("   ‚úÖ ML —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {sum(r[1].get('confidence', 0) for r in results) / len(results):.1%}")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {sum(r[2] for r in results) / len(results):.2f} —Å–µ–∫—É–Ω–¥")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        if any("csv" in name.lower() for name, _, _ in results):
            print("   ‚Ä¢ CSV –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è PostgreSQL")
        if any("json" in name.lower() for name, _, _ in results):
            print("   ‚Ä¢ JSON –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è ClickHouse –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö")
        if any("xml" in name.lower() for name, _, _ in results):
            print("   ‚Ä¢ XML –¥–∞–Ω–Ω—ã–µ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    print(f"\nüåê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ Swagger UI: http://localhost:8001/docs")
    print(f"   ‚Ä¢ Health check: http://localhost:8001/health")

if __name__ == "__main__":
    main()