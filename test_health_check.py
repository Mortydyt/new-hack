#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML —Å–µ—Ä–≤–∏—Å–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_health_check.py
"""
import requests
import time
import json
import psutil
import os
from datetime import datetime

class HealthMonitor:
    def __init__(self, base_url="http://localhost:8001"):
        self.base_url = base_url
        self.start_time = time.time()

    def check_service_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            if response.status_code == 200:
                health_data = response.json()
                return {
                    'status': 'healthy',
                    'response_time': response.elapsed.total_seconds(),
                    'details': health_data
                }
            else:
                return {
                    'status': 'error',
                    'response_time': response.elapsed.total_seconds(),
                    'error': f'HTTP {response.status_code}'
                }
        except requests.exceptions.Timeout:
            return {
                'status': 'timeout',
                'error': 'Request timeout'
            }
        except requests.exceptions.ConnectionError:
            return {
                'status': 'offline',
                'error': 'Connection refused'
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }

    def check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API endpoints"""
        endpoints = [
            ('/', 'GET'),
            ('/health', 'GET'),
            ('/docs', 'GET')
        ]

        results = {}
        for endpoint, method in endpoints:
            try:
                if method == 'GET':
                    response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                results[endpoint] = {
                    'status': response.status_code,
                    'response_time': response.elapsed.total_seconds()
                }
            except Exception as e:
                results[endpoint] = {
                    'status': 'error',
                    'error': str(e)
                }

        return results

    def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ ML —Å–µ—Ä–≤–∏—Å–∞
            ml_service_pid = None
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if 'python' in proc.info['name'].lower() and \
                       any('main.py' in cmd for cmd in proc.info['cmdline'] if cmd):
                        ml_service_pid = proc.info['pid']
                        break
                except:
                    continue

            resources = {
                'cpu_percent': psutil.cpu_percent(interval=1),
                'memory_percent': psutil.virtual_memory().percent,
                'disk_percent': psutil.disk_usage('/').percent,
                'ml_service_found': ml_service_pid is not None
            }

            if ml_service_pid:
                try:
                    process = psutil.Process(ml_service_pid)
                    resources['ml_service_cpu'] = process.cpu_percent()
                    resources['ml_service_memory'] = process.memory_percent()
                except:
                    pass

            return resources
        except Exception as e:
            return {'error': str(e)}

    def test_sample_request(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = {
                'format': 'json',
                'table_name': 'health_check_test',
                'data': [
                    {'id': 1, 'name': 'test', 'value': 100},
                    {'id': 2, 'name': 'sample', 'value': 200}
                ]
            }

            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ñ–∞–π–ª, –Ω–æ –¥–ª—è health check –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ API
            response = requests.get(f"{self.base_url}/", timeout=5)
            return {
                'status': response.status_code == 200,
                'response_time': response.elapsed.total_seconds()
            }
        except Exception as e:
            return {
                'status': False,
                'error': str(e)
            }

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç HEALTH CHECK REPORT")
        print("=" * 50)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è  Uptime: {time.time() - self.start_time:.1f} seconds")
        print("-" * 50)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        health = self.check_service_health()
        print(f"üè• Service Health: {health['status'].upper()}")
        if health['status'] == 'healthy':
            print(f"   ‚úÖ Response time: {health['response_time']:.3f}s")
            print(f"   üìä Details: {health.get('details', {})}")
        else:
            print(f"   ‚ùå Error: {health.get('error', 'Unknown error')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints
        print(f"\nüåê API Endpoints:")
        endpoints = self.check_api_endpoints()
        for endpoint, info in endpoints.items():
            status_icon = "‚úÖ" if info.get('status') == 200 else "‚ùå"
            response_time = info.get('response_time', 0)
            print(f"   {status_icon} {endpoint}: {info.get('status', 'ERROR')} ({response_time:.3f}s)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        print(f"\nüíª System Resources:")
        resources = self.check_system_resources()
        if 'error' not in resources:
            print(f"   üñ•Ô∏è  CPU: {resources['cpu_percent']:.1f}%")
            print(f"   üíæ Memory: {resources['memory_percent']:.1f}%")
            print(f"   üíø Disk: {resources['disk_percent']:.1f}%")
            print(f"   üéØ ML Service: {'‚úÖ Running' if resources['ml_service_found'] else '‚ùå Not found'}")

            if 'ml_service_cpu' in resources:
                print(f"   üìà ML CPU: {resources['ml_service_cpu']:.1f}%")
                print(f"   üìä ML Memory: {resources['ml_service_memory']:.1f}%")
        else:
            print(f"   ‚ùå Resource check failed: {resources['error']}")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print(f"\nüß™ Sample Request:")
        sample = self.test_sample_request()
        if sample['status']:
            print(f"   ‚úÖ Success ({sample['response_time']:.3f}s)")
        else:
            print(f"   ‚ùå Failed: {sample.get('error', 'Unknown error')}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° Recommendations:")
        self.generate_recommendations(health, endpoints, resources)

        return {
            'timestamp': datetime.now().isoformat(),
            'health': health,
            'endpoints': endpoints,
            'resources': resources,
            'sample_request': sample
        }

    def generate_recommendations(self, health, endpoints, resources):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        recommendations = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        if health['status'] != 'healthy':
            recommendations.append("üö® Service is not healthy - check logs and restart if needed")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if health['status'] == 'healthy' and health['response_time'] > 2.0:
            recommendations.append("‚ö†Ô∏è  Slow response time - consider optimization")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints
        failed_endpoints = [ep for ep, info in endpoints.items() if info.get('status') != 200]
        if failed_endpoints:
            recommendations.append(f"‚ö†Ô∏è  Failed endpoints: {', '.join(failed_endpoints)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if 'error' not in resources:
            if resources['cpu_percent'] > 80:
                recommendations.append("‚ö†Ô∏è  High CPU usage - check for performance bottlenecks")
            if resources['memory_percent'] > 80:
                recommendations.append("‚ö†Ô∏è  High memory usage - consider cleanup or upgrade")
            if resources['disk_percent'] > 80:
                recommendations.append("‚ö†Ô∏è  Low disk space - clean up unnecessary files")
            if not resources['ml_service_found']:
                recommendations.append("üö® ML service process not found - start the service")

        if not recommendations:
            recommendations.append("‚úÖ All systems operating normally")

        for rec in recommendations:
            print(f"   {rec}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ ML SERVICE HEALTH MONITOR")
    print("=" * 50)

    monitor = HealthMonitor()
    report = monitor.generate_report()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    try:
        with open('health_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ Report saved to: health_report.json")
    except Exception as e:
        print(f"\n‚ùå Failed to save report: {str(e)}")

    print(f"\nüéØ Health check completed!")

if __name__ == "__main__":
    main()